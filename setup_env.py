#!/usr/bin/env python3
"""
Setup script for BA Agent environment configuration
"""

import os
import sys

def create_env_file():
    """Create a .env file in the backend directory with user input"""
    
    print("üîß BA Agent Environment Setup")
    print("=" * 40)
    
    # Get API key
    print("\n1. Gemini API Key Setup")
    print("   Get your API key from: https://makersuite.google.com/app/apikey")
    api_key = input("   Enter your Gemini API key: ").strip()
    
    if not api_key:
        print("   ‚ùå API key is required!")
        return False
    
    # Get other optional settings
    print("\n2. Optional Settings (press Enter to skip)")
    
    database_url = input("   Database URL (default: sqlite:///./ba_agent.db): ").strip()
    if not database_url:
        database_url = "sqlite:///./ba_agent.db"
    
    qdrant_enabled = input("   Enable Qdrant vector database? (y/N): ").strip().lower()
    qdrant_enabled = "true" if qdrant_enabled in ['y', 'yes'] else "false"
    
    # Create .env content
    env_content = f"""# BA Agent Environment Configuration
# Generated by setup script

# Required: Gemini API Key
GEMINI_API_KEY={api_key}

# Database Configuration
DATABASE_URL={database_url}

# Qdrant Vector Database
QDRANT_ENABLED={qdrant_enabled}
QDRANT_HOST=localhost
QDRANT_PORT=6333

# Optional: Azure Communication Services
# ACS_CONNECTION_STRING=your_azure_connection_string
# ACS_SENDER_ADDRESS=your_sender_email
# APPROVAL_RECIPIENT_EMAIL=approver@example.com

# Optional: Azure DevOps
# ADO_ORGANIZATION_URL=https://dev.azure.com/your-organization/
# ADO_PROJECT_NAME=your-project-name
# ADO_PERSONAL_ACCESS_TOKEN=your_pat_token
"""
    
    # Write to backend/.env
    env_path = os.path.join("backend", ".env")
    try:
        with open(env_path, 'w') as f:
            f.write(env_content)
        print(f"\n‚úÖ Environment file created: {env_path}")
        return True
    except Exception as e:
        print(f"\n‚ùå Error creating .env file: {e}")
        return False

def main():
    if not os.path.exists("backend"):
        print("‚ùå Error: Please run this script from the project root directory")
        sys.exit(1)
    
    success = create_env_file()
    
    if success:
        print("\nüéâ Setup complete!")
        print("\nNext steps:")
        print("1. cd backend")
        print("2. python main.py")
        print("3. Open http://localhost:3000 in your browser")
    else:
        print("\n‚ùå Setup failed. Please try again.")
        sys.exit(1)

if __name__ == "__main__":
    main() 